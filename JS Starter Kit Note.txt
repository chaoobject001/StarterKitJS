{Modeule two: Course Overview}
What is in a JS starter kit?
    Package Management
    Bundling
    Minification
    Sourcemaps
    Transpiling
    Dynamic HTML Generation
    Centralized HTTP
    Mock API framework
    Component libraries
    Development Webserver
    Linting
    Automated testing
    Continuous integration
    Automated build
    Automated deployment
    Working example app convey how they all work together

GitHub as source control
    - Continuous integration
    - Automated Deployment (with Heroku + GitHub)

To commit work in starter kit:
    1. stage all files changed
        git add .
    2. commit changes locally with a message
        git commit -m "added new feature"
    3. Push work to GitHub
        git push

Course agenda
    JavaScript Development Environment
    = Boilerplate
    = Starter kit
    = Seed
    = Starter Project

Rhythm:
    Options
    Recommendation
    Implement


{Modeule two: Course Outline}
    intro
    editor: key configuration
    package manager
    web server
    development webservers for sharing work-in-progress
    Automation: build with single command
    Transpiling
    Bundling
    Linting
    Testing and continuous integration
        Unit test decisions:
            framework
            assertion library
            helper libraries
            where to run tests
            where to place tests
            when to run test
    HTTP call approach
        Node
            http request
        Browser
            XMLHttpRequest
            jQuery
            Fetch
        Node & Browser
            isomorphic-Fetch
            xhr
            SuperAgent
            Axios
        Create mock APIs
    Demo App
        Project Structure
    Production build
        Automatic build
    Automated Deployment: deploy API and interface to cloud host
    Update Approaches after launches

{Modeule three: Editors and Configuration}
Editor options:
Editorconfig
    Editors criteria:
        Strong JS support & Transpiling
        Index JS file for autocompletion
        Parse ES6 imports: report un-used imports as well as errors
        Automated refactor tooling: rename & extraction
        Framework support like node, react or angular
        Built-in terminal
            - most essential?:
                single window with all the info of current status of application
                like linting error, broken tests, build status, code coverage & more
        Options: Atom, Webstorm, Brackets, VSCode (selected)
    Editorconfig for automated consistency:
        placed at root of project

{Module four: Package Management}
Review JS package managers
Setup npm
Setup security scanning

    Review:
        Bower (outdated?)
        npm (selected)
        jspm
    When to run security check:
        npm start
    Install security check globally: npm install -g nsp

{Module five: Development Web Server}
Review development webserver options
Configure a Dev Webserver
Services for sharing work

    dev server options:
        http-server (ultra light-weight)
        live-server (support live reload)
        Express (also for PROD, selected)
        koa
        hapi
        budo
        Webpack (Built in web server)
        Browserify
        Browsersync
            (automatically setup dedicated IP for LAN; all device in sync for cross platform testing)

    Configure express: see srcServer.js

    Sharing Work-in-progress:
        localtunnel: easiest setup for low risk project (selected)
        ngork: Secure with easy setup
        now: No firewall hole; Hosting persists
        Surge: No firewall hole; Hosting persists

{Module six: Automation}
Options
NPM script
    options:
        Grunt:
            configuration over code
            write intermediary files b/t steps
            large plugin ecosystem
        Gulp:
            in-memory streams (pipe) - pipe output from this step to the next step
            Fast
            Code over configuration
        npm scripts (selected):
            Declared in package.json
            Leverage OS's command line
            Directly use npm packages
            Call separate Node scripts
            Convention-based pre/post hooks
            good documentation

    npm scripts:

{Module seven: Transpiling}
History and future
Transpilers
Set up Babel

  Transpilers:
    Babel: compile the newest JS down to ES5
    TypeScript: type safety for larger project with clear developer intent and autocompletion
    Elm: Clean syntax with immutable data structure, no run-time error

  Babel:
    configuration:
      .babelrc
        not npm specific
        easier to read (isolated)
      package.json
        one less file

  Build style:
    ES5:
      faster without transpile
      no transpiler dependency
    Transpiled:
      new feature
      consistent coding style
      same linting rule everywhere

  Setup Babel: update build process to transpile on File Save

{Module eight: Bundling}
ES6 / ES2015 Module
  standardized
  statically analyzable (no dynamic declaration)
  readbility
    Named import: easy to write variable that references parts of imported file
    Default export: speficy how to consume module

Bounder: bundle modules into single minified file
Bundlers options:
  Browserify: bundle npm package for web browser
  Webpack:
    also import CSS, images, Fonts, HTML
    bundle splitting
    built in hot reloading server
  Rollup: Tree shaking; Newer; better for library at this point
  JSPM: SystemJS; load module at run-time

Debug transpiled and bundled code with sourcemaps
  Sourcemaps maps code back to original source
  Can be generated automatically as part of build process
  Only downloaded when Dev tools are open

{Module nine: Linting}
Linting Tools
Configuration approach for ESLint
Setup ESLint (now lint TypeScript)

  Linting Tools:
    Enforce Consistency
    Avoid Mistakes

  Core Decision:
  Config format?
  Which built-in rules?
  Warnning or Errors?
  Which plugins? (for extra functions)
  Use preset?

{Module ten: Testing and Continuous Integration}

  Unit test: single function or module
    Mockout external dependencies: APIs, database calls and file system interaction
  Integration test: interactions b/t modules (not covered here)
  UI test: automate interaction with UI (not covered here)

  6 key decisions to consider for unit test with JS
  1. Framework
  2. Assertion library
  3. Helper libraries
  4. Where to run tests (environments)
  5. Where to place tests
  6. When to run test

  1. Framework
    options:
      Mocha (selected)
      Jasmine (assertion library built-in)
      Tape (lean and simple)
      QUnit
      AVA (parallel test execution & re-run impacted tests only)
      Jest (from facebook, recently updated, wraper around Jasmine)
  2. Assertion library
    Assertion: declare what is expected
      Chai
  3. Helper library
    options:
      JSDOM (selected): Simulate browser with node without a browser
      Cheerio: JQuery for server
  4. Where to run test:
    options:
      Browser: Karma, Testem
      Headless browser: PhantomJS
      In-memory DOM: JSDOM (a light-weight alternative to PhantomJS) - selected
  5. Where to store tests:
    options:
      centralized (folder):
        less noise in source code directory
        inertia
      alongside: (node) - selected
        easy import
        clear visibility
        no recreating folder structure
        easy to move file
  6. When to run test: Everytime you hit Save (for unit test)
































